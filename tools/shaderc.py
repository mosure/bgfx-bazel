import os
from pathlib import Path
import platform
import sys


system = platform.system()

shaderc = {
    'Windows': 'tools/windows/shaderc',
    'Linux': 'tools/unix/shaderc',
    'Darwin': 'tools/darwin/shaderc',
}[system]

shader_params = [
    ('glsl', 'linux', '440'),
    ('spirv', 'linux', 'spirv'),
    ('metal', 'osx', 'metal'),
    ('dx11', 'windows', '420'),
]


# argv [shader.py, log_file_path, ...shaders]
log_file = sys.argv[1]

bgfx_shader_includes = Path(sys.argv[2]).parent

shader_bin_dir = Path(log_file).parent.joinpath('resources/shaders')


source_files = sys.argv[3:]
source_paths = [Path(filepath) for filepath in source_files]

varying_defs = list(filter(lambda x: x.stem == 'varying.def', source_paths))
root_varying_def = list(sorted(varying_defs, key=lambda x: len(x.parents)))[0]


def get_varying_def(source_path: Path):
    for varying_def in varying_defs:
        if source_path.parent == varying_def.parent:
            return varying_def

    return root_varying_def


frag_names = []
vert_names = []


errors = 0
for shader_src in source_paths:
    varying_def = get_varying_def(shader_src)
    outname = f'{shader_src.stem}.bin'

    if shader_src.suffixes[0] == '.fs':
        frag_names.append((shader_src.stem.split('.')[0], outname))
    elif shader_src.suffixes[0] == '.vs':
        vert_names.append((shader_src.stem.split('.')[0], outname))

    for render_type_dir, platform, render_type in shader_params:
        outdir = f'{shader_bin_dir}/{render_type_dir}'

        Path(outdir).mkdir(parents=True, exist_ok=True)

        outpath = f'{outdir}/{outname}'

        if shader_src.suffixes[0] not in ('.fs', '.vs'):
            continue

        print((varying_def, shader_src, render_type_dir, outpath), flush=True)

        command = f'{shaderc} -f {shader_src} -o {outpath} --type {shader_src.suffixes[0][1]} --platform {platform} -p {render_type} -i {bgfx_shader_includes} --varyingdef {varying_def}'
        errors += os.system(command) != 0


with open(log_file, 'w') as autogen:
    autogen.write('\n'.join([
        '#pragma once',
        '#include <string>',
        '// -------- autogenerated ---------',
        'namespace example::shaders {',
        'namespace frag {'
    ] + [
        f'constexpr std::string_view {program_name} = "{outpath}";' for program_name, outpath in vert_names
    ] + [
        '} // namespace frag',
        'namespace vert {'
    ] + [
        f'constexpr std::string_view {program_name} = "{outpath}";' for program_name, outpath in frag_names
    ] + [
        '} // namespace vert',
        '} // namespace example::shaders',
    ]))


exit(errors)

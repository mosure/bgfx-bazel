def get_varying_def(source_file, varying_defs, default_def):
    for varying_def in varying_defs:
        if source_file.dirname == varying_def.dirname:
            return varying_def

    return default_def


def _texturec_impl(ctx):
    texturec_path = ctx.attr.tooling.files.to_list()[0].path
    print('Using texture tooling: ' + texturec_path)

    image_srcs = [
        f for t in ctx.attr.images for f in t.files.to_list()
    ]

    runtime_files = []
    header_out = ctx.actions.declare_file('generated_textures.hpp')


    textures = []

    for f in image_srcs:
        name = f.basename
        outdir = f.dirname.split('resources/textures')[1].strip('/')

        relative_path = name
        if outdir != '':
            relative_path = outdir + '/' + name

        textures.append((name.replace('.' + f.extension, ''), relative_path, outdir))

        outpath = 'resources/textures/' + outdir + '/' + name + '.dds'

        out = ctx.actions.declare_file(outpath)
        runtime_files.append(out)

        ctx.actions.run_shell(
            outputs=[out],
            inputs=depset([
                f,
            ]),
            tools=depset([
                ctx.attr.tooling.files.to_list()[0],
            ]),
            command=texturec_path + ' '.join([
                ' -f',
                f.path,
                '-o',
                out.path,
            ]),
            progress_message='Compiling texture: ' + f.path,
            mnemonic = 'TextureCompile'
        )

    texture_lines = []
    for program_name, outpath, outdir in textures:
        if outdir:
            texture_lines.append('namespace ' + outdir.replace('/', '::') + ' {')
            texture_lines.append('inline const char* const ' + program_name + ' = "' + outpath + '";')
            texture_lines.append('}')
        else:
            texture_lines.append('inline const char* const ' + program_name + ' = "' + outpath + '";')

    generated_lines = [
        '#pragma once',
        '#include <string>',
        '// -------- autogenerated ---------',
        'namespace generated::textures {',
    ] + texture_lines + [
        '} // namespace generated::textures',
    ]

    ctx.actions.write(
        output = header_out,
        content = '\n'.join(generated_lines),
    )

    compile_ctx = cc_common.create_compilation_context(
        headers=depset([header_out]),
        includes=depset([header_out.dirname])
    )

    cc_info = CcInfo(compilation_context=compile_ctx)

    return [
        DefaultInfo(files = depset([header_out]), runfiles = ctx.runfiles(files=runtime_files)),
        cc_info
    ]


texture_sources = rule(
    implementation = _texturec_impl,
    attrs = {
        'images': attr.label_list(allow_files=['.png']),
        'tooling': attr.label(allow_single_file=True),
    },
)
